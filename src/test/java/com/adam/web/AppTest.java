/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.adam.web;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import java.util.Random;

import static junit.framework.TestCase.assertEquals;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

@SpringBootTest
@RunWith(SpringRunner.class)

public class AppTest {
    @Autowired
    private WebApplicationContext wac;

    private MockMvc mockMvc;

    @Before
    public void setup() throws Exception {

        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();
    }

    @Test
    public void getWebSiteGreeting() throws Exception {
        MvcResult mvcResultGet = this.mockMvc.perform(get("/greetings/1"))
                .andReturn();
        String contentAsStringGET = mvcResultGet.getResponse().getContentAsString();

        assertEquals("This is Sparta", contentAsStringGET);
        mvcResultGet = this.mockMvc.perform(get("/greetings/2"))
                .andReturn();
        contentAsStringGET = mvcResultGet.getResponse().getContentAsString();

        assertEquals("No this is Patrick", contentAsStringGET);

        mvcResultGet = this.mockMvc.perform(get("/greetings/3"))
                .andReturn();
        contentAsStringGET = mvcResultGet.getResponse().getContentAsString();

        assertEquals("Greetings from Spring Boot!", contentAsStringGET);




        MvcResult mvcResultPost = this.mockMvc.perform(post("/greetings")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"id\":"+ 3+", \"message\": \"Lulz, this sucks\"}"))
                .andReturn();



        assertEquals(201, mvcResultPost.getResponse().getStatus());

        mvcResultGet = this.mockMvc.perform(get("/greetings/3"))
                .andReturn();
        contentAsStringGET = mvcResultGet.getResponse().getContentAsString();

        assertEquals("Lulz, this sucks", contentAsStringGET);
    }
}
